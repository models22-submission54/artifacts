; This file includes 
;     a) the mapping from datamodel to FOL
;     b) the mapping from database to FOL
; Fragment used: Uninterpreted functino + string + linear integer arithmetic 
(set-logic UFSLIA)
; =================================================
;   A. Mapping from datamodel to FOL
; =================================================
(declare-sort Classifier 0)
(declare-const nullClassifier Classifier)
(declare-const invalidClassifier Classifier)
(declare-const nullInt Int)
(declare-const invalidInt Int)
(declare-const nullString String)
(declare-const invalidString String)
(declare-fun Lecturer (Classifier) Bool)
(declare-fun Student (Classifier) Bool)
(declare-fun age_Lecturer (Classifier) Int)
(declare-fun email_Lecturer (Classifier) String)
(declare-fun name_Lecturer (Classifier) String)
(declare-fun age_Student (Classifier) Int)
(declare-fun name_Student (Classifier) String)
(declare-fun email_Student (Classifier) String)
(declare-fun Enrolment (Classifier Classifier) Bool)

(assert (distinct nullClassifier invalidClassifier))
(assert (distinct nullInt invalidInt))
(assert (distinct nullString invalidString))
(assert (not (Lecturer nullClassifier)))
(assert (not (Student nullClassifier)))
(assert (not (Lecturer invalidClassifier)))
(assert (= (age_Lecturer nullClassifier) invalidInt))
(assert (= (age_Lecturer invalidClassifier) invalidInt))
(assert (forall ((x Classifier))
    (=> (Lecturer x)
        (distinct (age_Lecturer x) invalidInt))))
(assert (= (email_Lecturer nullClassifier) invalidString))
(assert (= (email_Lecturer invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (Lecturer x)
        (distinct (email_Lecturer x) invalidString))))
(assert (= (name_Lecturer nullClassifier) invalidString))
(assert (= (name_Lecturer invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (Lecturer x)
        (distinct (name_Lecturer x) invalidString))))
(assert (not (Student invalidClassifier)))
(assert (= (age_Student nullClassifier) invalidInt))
(assert (= (age_Student invalidClassifier) invalidInt))
(assert (forall ((x Classifier))
    (=> (Student x)
        (distinct (age_Student x) invalidInt))))
(assert (= (name_Student nullClassifier) invalidString))
(assert (= (name_Student invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (Student x)
        (distinct (name_Student x) invalidString))))
(assert (= (email_Student nullClassifier) invalidString))
(assert (= (email_Student invalidClassifier) invalidString))
(assert (forall ((x Classifier))
    (=> (Student x)
        (distinct (email_Student x) invalidString))))
(assert (forall ((x Classifier) (y Classifier))
    (=> (Enrolment x y) 
        (and (Lecturer x) (Student y)))))
(assert (forall ((x Classifier)) 
    (=> (Lecturer x) (not (Student x)))))
(assert (forall ((x Classifier)) 
    (=> (Student x) (not (Lecturer x)))))

; =================================================
;   B. Mapping from database to FOL
; =================================================
(declare-sort BOOL 0)
(declare-const TRUE BOOL)
(declare-const FALSE BOOL)
(declare-const NULL BOOL)
(declare-fun id (Int) Classifier)
(declare-fun left (Int) Int)
(declare-fun right (Int) Int)
(declare-fun student-index (Int) Bool)
(declare-fun lecturer-index (Int) Bool)
(declare-fun enrolment-index (Int) Bool)
(declare-fun val-student-id (Int) Classifier)
(declare-fun val-student-age (Int) Int)
(declare-fun val-student-name (Int) String)
(declare-fun val-student-email (Int) String)
(declare-fun val-lecturer-id (Int) Classifier)
(declare-fun val-lecturer-age (Int) Int)
(declare-fun val-lecturer-name (Int) String)
(declare-fun val-lecturer-email (Int) String)
(declare-fun val-enrolment-lecturers (Int) Classifier)
(declare-fun val-enrolment-students (Int) Classifier)

(assert (not (= TRUE FALSE)))
(assert (not (= TRUE NULL)))
(assert (not (= FALSE NULL)))
(assert (forall ((x BOOL))
    (or (= x TRUE) (or (= x FALSE) (= x NULL)))))
(assert (forall ((x Int))
    (=> (student-index x)
        (exists ((c Classifier))
            (and (Student c)
                 (= c (id x)))))))
(assert (forall ((c Classifier))
    (=> (Student c)
        (exists ((x Int))
            (and (student-index x)
                 (= c (id x)))))))
(assert (forall ((x Int) (y Int))
    (=> (and (student-index x) (student-index y) (not (= x y)))
        (not (= (id x) (id y))))))
(assert (forall ((x Int))
    (=> (student-index x)
        (= (val-student-id x) (id x)))))
(assert (forall ((x Int))
    (=> (student-index x)
        (= (val-student-age x) (age_Student (id x))))))
(assert (forall ((x Int))
    (=> (student-index x)
        (= (val-student-name x) (name_Student (id x))))))
(assert (forall ((x Int))
    (=> (student-index x)
        (= (val-student-email x) (email_Student (id x))))))
(assert (forall ((x Int))
    (=> (lecturer-index x)
        (exists ((c Classifier))
            (and (Lecturer c)
                 (= c (id x)))))))
(assert (forall ((c Classifier))
    (=> (Lecturer c)
        (exists ((x Int))
            (and (lecturer-index x)
                 (= c (id x)))))))
(assert (forall ((x Int) (y Int))
    (=> (and (lecturer-index x) (lecturer-index y) (not (= x y)))
        (not (= (id x) (id y))))))
(assert (forall ((x Int))
    (=> (lecturer-index x)
        (= (val-lecturer-id x) (id x)))))
(assert (forall ((x Int))
    (=> (lecturer-index x)
        (= (val-lecturer-age x) (age_Lecturer (id x))))))
(assert (forall ((x Int))
    (=> (lecturer-index x)
        (= (val-lecturer-name x) (name_Lecturer (id x))))))
(assert (forall ((x Int))
    (=> (lecturer-index x)
        (= (val-lecturer-email x) (email_Lecturer (id x))))))
(assert (forall ((x Int))
    (=> (enrolment-index x)
        (exists ((c1 Classifier) (c2 Classifier))
            (and (Enrolment c1 c2)
                 (= c1 (id (left x)))
                 (= c2 (id (right x))))))))
(assert (forall ((c1 Classifier) (c2 Classifier))
    (=> (Enrolment c1 c2)
        (exists ((x Int))
            (and (enrolment-index x)
                 (= c1 (id (left x)))
                 (= c2 (id (right x))))))))
(assert (forall ((x Int) (y Int))
    (=> (and (enrolment-index x) (enrolment-index y) (not (= x y)))
        (not (and (= (left x) (left y))
                  (= (right x) (right y)))))))
(assert (forall ((x Int))
    (=> (enrolment-index x)
        (= (val-enrolment-lecturers x) (id (left x))))))
(assert (forall ((x Int))
    (=> (enrolment-index x)
        (= (val-enrolment-students x) (id (right x))))))
; =================================================
;   END CORE
; =================================================

; =================================================
;   INVARIANTS
; =================================================
; there is no NULL age
(assert (forall ((c Classifier))
    (=> (Lecturer c)
        (not (= (age_Lecturer c) nullInt)))))
(assert (forall ((c Classifier))
    (=> (Student c)
        (not (= (age_Student c) nullInt)))))
; =================================================

; Example #4
; SELECT NOT EXISTS (SELECT 1 FROM (SELECT s.age, e.lecturers FROM Student s JOIN Enrolment e ON e.students = s.Student_id) AS TEMP
; JOIN Lecturer l WHERE TEMP.age >= l.age AND l.Lecturer_id = TEMP.lecturers)
; sel1 = SELECT NOT EXISTS (SELECT 1 FROM (SELECT s.age, e.lecturers FROM Student s JOIN Enrolment e ON e.students = s.Student_id) AS TEMP
; JOIN Lecturer l WHERE TEMP.age >= l.age AND l.Lecturer_id = TEMP.lecturers)
; expr1 = NOT EXISTS (SELECT 1 FROM (SELECT s.age, e.lecturers FROM Student s JOIN Enrolment e ON e.students = s.Student_id) AS TEMP
; JOIN Lecturer l WHERE TEMP.age >= l.age AND l.Lecturer_id = TEMP.lecturers)
; expr2 = EXISTS (SELECT 1 FROM (SELECT s.age, e.lecturers FROM Student s JOIN Enrolment e ON e.students = s.Student_id) AS TEMP
; JOIN Lecturer l WHERE TEMP.age >= l.age AND l.Lecturer_id = TEMP.lecturers)
; sel2 = SELECT 1 FROM (SELECT s.age, e.lecturers FROM Student s JOIN Enrolment e ON e.students = s.Student_id) AS TEMP
; JOIN Lecturer l WHERE TEMP.age >= l.age AND l.Lecturer_id = TEMP.lecturers
; expr3 = 1
; expr4 = TEMP.age >= l.age AND l.Lecturer_id = TEMP.lecturers
; expr5 = l.Lecturer_id = TEMP.lecturers
; expr6 = l.Lecturer_id
; expr7 = TEMP.lecturers
; expr8 = TEMP.age >= l.age
; expr9 = TEMP.age
; expr10 = l.age
; TEMP = SELECT s.age, e.lecturers FROM Student s JOIN Enrolment e ON e.students = s.Student_id
; expr11 = s.age
; expr12 = e.lecturers
; expr13 = e.students = s.Student_id
; expr14 = e.students
; expr15 = s.Student_id
(declare-fun index-sel1 (Int) Bool)
(declare-fun index-sel2 (Int) Bool)
(declare-fun index-sel2product (Int) Bool)
(declare-fun index-temp (Int) Bool)
(declare-fun index-tempproduct (Int) Bool)
(declare-fun val-sel1-expr1 (Int) BOOL)
(declare-fun val-sel1-expr2 (Int) BOOL)
(declare-fun val-sel2-expr3 (Int) Int)
(declare-fun val-sel2product-expr4 (Int) BOOL)
(declare-fun val-sel2product-expr5 (Int) BOOL)
(declare-fun val-sel2product-expr6 (Int) Classifier)
(declare-fun val-sel2product-expr7 (Int) Classifier)
(declare-fun val-sel2product-expr8 (Int) BOOL)
(declare-fun val-sel2product-expr9 (Int) Int)
(declare-fun val-sel2product-expr10 (Int) Int)
(declare-fun val-temp-expr11 (Int) Int)
(declare-fun val-temp-expr12 (Int) Classifier)
(declare-fun val-tempproduct-expr13 (Int) BOOL)
(declare-fun val-tempproduct-expr14 (Int) Classifier)
(declare-fun val-tempproduct-expr15 (Int) Classifier)

(assert (exists ((x Int))
    (and (index-sel1 x)
         (forall ((y Int))
            (=> (not (= x y))
                (not (index-sel1 y)))))))

(assert (forall ((x Int))
    (=> (index-sel1 x)
        (= (= (val-sel1-expr1 x) TRUE)
           (= (val-sel1-expr2 x) FALSE)))))

(assert (forall ((x Int))
    (=> (index-sel1 x)
        (= (= (val-sel1-expr1 x) FALSE)
           (= (val-sel1-expr2 x) TRUE)))))

(assert (forall ((x Int))
    (=> (index-sel1 x)
        (= (= (val-sel1-expr1 x) NULL)
           (= (val-sel1-expr2 x) NULL)))))

(assert (forall ((x Int))
    (=> (index-sel1 x)
        (= (= (val-sel1-expr2 x) TRUE)
           (exists ((y Int))
                (index-sel2 y))))))

(assert (forall ((x Int))
    (=> (index-sel1 x)
        (= (= (val-sel1-expr2 x) FALSE)
           (not (exists ((y Int))
                    (index-sel2 y)))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (exists ((c1 Int) (c2 Int))
            (and (index-temp c1)
                 (lecturer-index c2)
                 (= c1 (left x))
                 (= c2 (right x)))))))

(assert (forall ((c1 Int) (c2 Int))
    (=> (and (index-temp c1)
             (lecturer-index c2))
        (exists ((x Int))
            (and (index-sel2product x)
                 (= c1 (left x))
                 (= c2 (right x)))))))

;(assert (forall ((x Int))
;    (= (index-sel2product x)
;       (and (index-temp (left x))
;            (lecturer-index (right x))))))

(assert (forall ((x Int))
    (= (index-sel2 x)
       (and (index-sel2product x)
            (= (val-sel2product-expr4 x) TRUE)))))

(assert (forall ((x Int) (y Int))
    (=> (and (index-sel2 x)
             (index-sel2 y)
             (not (= x y)))
        (not (and (= (left x) (left y))
                  (= (right x) (right y)))))))

(assert (forall ((x Int))
    (=> (index-sel2 x)
        (= (val-sel2-expr3 x) 1))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr4 x) TRUE)
           (and (= (val-sel2product-expr5 x) TRUE)
                (= (val-sel2product-expr8 x) TRUE))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr4 x) FALSE)
           (or (= (val-sel2product-expr5 x) FALSE)
               (= (val-sel2product-expr8 x) FALSE))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr4 x) NULL)
           (or (and (= (val-sel2product-expr5 x) NULL)
                    (= (val-sel2product-expr8 x) NULL))
               (and (= (val-sel2product-expr5 x) TRUE)
                    (= (val-sel2product-expr8 x) NULL))
               (and (= (val-sel2product-expr5 x) NULL)
                    (= (val-sel2product-expr8 x) TRUE)))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr5 x) TRUE)
           (and (not (= (val-sel2product-expr6 x) nullClassifier))
                (not (= (val-sel2product-expr7 x) nullClassifier))
                (= (val-sel2product-expr6 x) (val-sel2product-expr7 x)))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr5 x) FALSE)
           (and (not (= (val-sel2product-expr6 x) nullClassifier))
                (not (= (val-sel2product-expr7 x) nullClassifier))
                (not (= (val-sel2product-expr6 x) (val-sel2product-expr7 x))))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr5 x) NULL)
           (or (= (val-sel2product-expr6 x) nullClassifier)
               (= (val-sel2product-expr7 x) nullClassifier))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (val-sel2product-expr6 x)
           (val-lecturer-id (right x))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (val-sel2product-expr7 x)
           (val-temp-expr12 (left x))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr8 x) TRUE)
           (and (not (= (val-sel2product-expr9 x) nullInt))
                (not (= (val-sel2product-expr10 x) nullInt))
                (>= (val-sel2product-expr9 x) (val-sel2product-expr10 x)))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr8 x) FALSE)
           (and (not (= (val-sel2product-expr9 x) nullInt))
                (not (= (val-sel2product-expr10 x) nullInt))
                (not (>= (val-sel2product-expr9 x) (val-sel2product-expr10 x))))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (= (val-sel2product-expr8 x) NULL)
           (or (= (val-sel2product-expr9 x) nullInt)
               (= (val-sel2product-expr10 x) nullInt))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (val-sel2product-expr9 x)
           (val-temp-expr11 (left x))))))

(assert (forall ((x Int))
    (=> (index-sel2product x)
        (= (val-sel2product-expr10 x)
           (val-lecturer-age (right x))))))

(assert (forall ((x Int))
    (= (index-temp x)
       (and (index-tempproduct x)
            (= (val-tempproduct-expr13 x) TRUE)))))

(assert (forall ((x Int))
    (=> (index-tempproduct x)
        (exists ((c1 Int) (c2 Int))
            (and (student-index c1)
                 (enrolment-index c2)
                 (= c1 (left x))
                 (= c2 (right x)))))))

(assert (forall ((c1 Int) (c2 Int))
    (=> (and (student-index c1)
             (enrolment-index c2))
        (exists ((x Int))
            (and (index-tempproduct x)
                 (= c1 (left x))
                 (= c2 (right x)))))))

;(assert (forall ((x Int))
;    (= (index-tempproduct x)
;       (and (student-index (left x))
;            (enrolment-index (right x))))))

(assert (forall ((x Int) (y Int))
    (=> (and (index-tempproduct x)
             (index-tempproduct y)
             (not (= x y)))
        (not (and (= (left x) (left y))
                  (= (right x) (right y)))))))

(assert (forall ((x Int))
    (=> (index-temp x)
        (= (val-temp-expr11 x)
           (val-student-age (left x))))))

(assert (forall ((x Int))
    (=> (index-temp x)
        (= (val-temp-expr12 x)
           (val-enrolment-lecturers (right x))))))

(assert (forall ((x Int))
    (=> (index-tempproduct x)
        (= (= (val-tempproduct-expr13 x) TRUE)
           (and (not (= (val-tempproduct-expr14 x) nullClassifier))
                (not (= (val-tempproduct-expr15 x) nullClassifier))
                (= (val-tempproduct-expr14 x) (val-tempproduct-expr15 x)))))))

(assert (forall ((x Int))
    (=> (index-tempproduct x)
        (= (= (val-tempproduct-expr13 x) FALSE)
           (and (not (= (val-tempproduct-expr14 x) nullClassifier))
                (not (= (val-tempproduct-expr15 x) nullClassifier))
                (not (= (val-tempproduct-expr14 x) (val-tempproduct-expr15 x))))))))

(assert (forall ((x Int))
    (=> (index-tempproduct x)
        (= (= (val-tempproduct-expr13 x) NULL)
           (or (= (val-tempproduct-expr14 x) nullClassifier)
               (= (val-tempproduct-expr15 x) nullClassifier))))))

(assert (forall ((x Int))
    (=> (index-tempproduct x)
        (= (val-tempproduct-expr14 x)
           (val-enrolment-students (right x))))))

(assert (forall ((x Int))
    (=> (index-tempproduct x)
        (= (val-tempproduct-expr15 x)
           (val-student-id (left x))))))

; Subgoal C3: Prove that it is the correct implementation of the OCL
; OCL: Student.allInstances()->forAll(s|s.lecturers->forAll(l|l.age > s.age))
; This proof is a two fold, this is the second one.
(assert (forall ((x Int))
                    (=> (index-sel1 x)
                        (= (val-sel1-expr1 x) TRUE))))
(assert (not (forall ((s Classifier))
                    (=> (Student s)
                        (forall ((l Classifier))
                            (=> (Enrolment l s)
                                (> (age_Lecturer l) (age_Student s))))))))

(check-sat)
